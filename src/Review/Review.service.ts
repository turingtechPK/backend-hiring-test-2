import { Injectable } from '@nestjs/common';
import { Model } from 'mongoose';
import { InjectModel } from '@nestjs/mongoose';
import { Review } from '../models/Review.model';

/* This is a TypeScript class that provides CRUD operations for a Review model using Mongoose. */
@Injectable()
export class ReviewService {
  /**
   * This is a constructor function that injects a model for the Review schema.
   * @param reviewModel - The reviewModel parameter is an instance of the Mongoose Model class that
   * represents the Review model in the database. It is used to perform CRUD (Create, Read, Update,
   * Delete) operations on the Review collection in the database. The @InjectModel decorator is used to
   * inject the Review model into the
   */
  constructor(
    @InjectModel('Review') private readonly reviewModel: Model<Review>,
  ) {}

  /**
   * This function returns all reviews from the review model as a promise.
   * @returns A promise that resolves to an array of Review objects. The `findAll()` method is using
   * the `find()` method of the `reviewModel` to retrieve all documents in the collection and then
   * executing the query using `exec()`.
   */
  async findAll(): Promise<Review[]> {
    return this.reviewModel.find().exec();
  }

  /**
   * This function finds a review by its ID and returns a promise of the review object.
   * @param {string} id - The `id` parameter is a string representing the unique identifier of a
   * `Review` object that we want to retrieve from the database. The `findById` method is used to
   * search for a document in the database by its `_id` field, which is a unique identifier
   * automatically generated by MongoDB for each
   * @returns A promise that resolves to a single review object with the matching id.
   */
  async findById(id: string): Promise<Review> {
    return this.reviewModel.findById(id).exec();
  }

  /**
   * This function creates a new review and saves it to the database.
   * @param {Review} createReview - createReview is a parameter of type Review, which is an object
   * containing the data for a new review that needs to be created. This parameter is used to create a
   * new instance of the reviewModel and save it to the database.
   * @returns A Promise that resolves to a Review object.
   */
  async create(createReview: Review): Promise<Review> {
    const createdReview = new this.reviewModel(createReview);
    return createdReview.save();
  }

  /**
   * This is an asynchronous function that updates a review in a database and returns the updated
   * review.
   * @param {string} id - A string representing the unique identifier of the review that needs to be
   * updated.
   * @param {Review} updateReview - The `updateReview` parameter is an object of type `Review` that
   * contains the updated information for a review. This object is used to update an existing review in
   * the database.
   * @returns A Promise that resolves to a Review object. The `update()` method updates a review
   * document in the database with the specified `id` and returns the updated document as a Promise.
   * The `new: true` option ensures that the updated document is returned instead of the original
   * document.
   */
  async update(id: string, updateReview: Review): Promise<Review> {
    return this.reviewModel.findByIdAndUpdate(id, updateReview, { new: true }).exec();
  }

  /**
   * This is an asynchronous function that deletes a review by its ID and returns the deleted review.
   * @param {string} id - The `id` parameter is a string representing the unique identifier of the
   * review that needs to be deleted from the database.
   * @returns The `delete` method is returning a `Promise` that resolves to a `Review` object. The
   * `Review` object is the one that was deleted from the database using the `findByIdAndRemove` method
   * of the `reviewModel`.
   */
  async delete(id: string): Promise<Review> {
    return this.reviewModel.findByIdAndRemove(id).exec();
  }
}
